<?php
	/**
	 * @file    Hooks for this module
	 */

	use Drupal\gigya\Helper\GigyaHelper;
	use Drupal\gigya_user_deletion\Helper\GigyaUserDeletionHelper;

	/**
	 * Implements hook_page_attachments().
	 *
	 * @param array $attachments
	 */
	function gigya_user_deletion_page_attachments(array &$attachments) {
		\Drupal::moduleHandler()->invoke('gigya_user_deletion', 'job_cron');
	}

	function delete_uid_queue_name() {
		return 'delete_uid_queue';
	}

	/**
	 * Implements hook_cron().
	 */
	function gigya_user_deletion_cron() {
		$enable_job = \Drupal::config('gigya_user_deletion.job')->get('gigya_user_deletion.enableJob');

		/* Get counters from DB or set 0 if null */
		$counter_succeed = \Drupal::state()->get('gigya_deletion_job.counter_succeed', 0);
		$counter_failed = \Drupal::state()->get('gigya_deletion_job.counter_failed', 0);

		$messageSuccess = "User successfully deleted from CMS - Drupal UID: @drupalUid, Gigya UID: @gigyaUid";
		if ($enable_job)
		{
			\Drupal::logger('gigya_user_deletion')->info('Gigya cron started');

			$gigyaHelper = new GigyaHelper();
			$userDeletionHelper = new GigyaUserDeletionHelper();

			/* Job frequency */
			$job_frequency = \Drupal::config('gigya_user_deletion.job')->get('gigya_user_deletion.jobFrequency');
			/* Deletion type */
			$deletion_type = \Drupal::config('gigya_user_deletion.job')->get('gigya_user_deletion.deletionType');
			/* Request time */
			$request_time = \Drupal::time()->getRequestTime();
			/* Get last run */
			$last_run = \Drupal::state()->get('gigya_deletion_job.last_run', 0);
			/* Creates a new queue file */
			$queue_file = \Drupal::queue('job_queue_file');
			$queue_file->createQueue();
			// Create queue_users
			$queue_users = \Drupal::queue('job_queue_users');
			$queue_users->createQueue();

			/* If x seconds passed since last time add file to queue_file */
			if (($request_time - $last_run) > $job_frequency)
			{
				/* Get files from S3 */
				$files = $userDeletionHelper->getFileList();
				$queue_file = \Drupal::queue('job_queue_file');
				$last_run = \Drupal::state()->get('gigya_deletion_job.last_run', 0);

				/* Add files to queue */
				$files_added = array();
				if (!empty($files))
				{
					foreach ($files as $file) {
						$files_processed = \Drupal::database()
						  ->select('gigya_user_deletion')
						  ->fields('gigya_user_deletion', [
							'filename',
						  ])
						  ->orderBy('filename', 'ASC')
						  ->execute()
						  ->fetchCol();

						/* Add item - file to queue_file and DB */
						$file_name = ((array) $file)['Key'];
						if (!in_array($file_name, $files_processed))
						{
							if (!empty(pathinfo($file_name)['extension']) and pathinfo($file_name)['extension'] === 'csv') {
								$queue_file->createItem($file);
								$files_added[] = $file_name;
								try {
									/* Insert processed files into DB */
									\Drupal::database()
									  ->merge('gigya_user_deletion')
									  ->key('filename', $file_name)
									  ->insertFields([
										'filename' => $file_name,
										'time_processed' => time(),
									  ])
									  ->updateFields([
										'time_processed' => time(),
									  ])
									  ->execute();
								} catch (\Exception $e) {
									\Drupal::logger('gigya_user_deletion')
									  ->error('Unable to insert file name: ' . $file_name . ' to database.');
								}
							}
						}
					}
				}

				/* Save counter value on DB and add to log */
				$queue_files_counter = $queue_file->numberOfItems();
				\Drupal::state()
				  ->set('gigya_deletion_job.queue_files_counter', $queue_files_counter);
				\Drupal::logger('gigya_user_deletion')
				  ->info($queue_files_counter . ' files added to the queue on ' . date('Y-m-d \a\t H:i:s', \Drupal::time()
					  ->getRequestTime()) . ': ' . implode(', ', $files_added));
			}

			/* If queue_file is not empty take item (file) and add all users to queue_users */
			while ($queue_file->numberOfItems() > 0)
			{
				$item_file = $queue_file->claimItem();

				if ($item_file !== false)
				{
					$item_array = (array) $item_file;
					$file = $item_array['data']['Key'];
					if ($file !== null)
					{
						$accounts = $userDeletionHelper->getUsers($file);
						foreach ($accounts as $account)
						{
							foreach ($account as $gigya_uid)
							{
								/* Add item - account to queue_users */
								$item_user = array('gigya_uid' => $gigya_uid);
								$queue_users->createItem($item_user);
							}
						}
					}
				}

				/* Remove the file from the queue_file */
				$queue_file->deleteItem($item_file);
			}

			/* Update last run when file queue is empty */
			\Drupal::state()->set('gigya_deletion_job.last_run', $request_time );

			/* Claim uid from queue_users and delete it */
			while ($queue_users->numberOfItems() > 0)
			{
				$item_user = $queue_users->claimItem();

				if (!empty($item_user))
				{
					$item_array = (array) $item_user;

					$uid = $item_array['data']['gigya_uid'];
					if ($user = $gigyaHelper->getUidByUUID($uid)) {
						try {
							$drupal_uid = $user->get('uid')->value;
							if ($deletion_type === 'hard') {
								user_delete($drupal_uid);
								$counter_succeed++;
								\Drupal::state()
								  ->set('gigya_deletion_job.counter_succeed', $counter_succeed);
								\Drupal::logger('gigya_user_deletion')
								  ->notice($messageSuccess, [
									'@drupalUid' => $drupal_uid,
									'@gigyaUid' => $uid,
								  ]);
							}
							elseif ($deletion_type === 'soft') {
								\Drupal::service('user.data')
								  ->set('gigya_user_deletion', $drupal_uid, 'is_deleted', TRUE);
								\Drupal::service('user.data')
								  ->set('gigya_user_deletion', $drupal_uid, 'deleted_time', time());
							}
						} catch (\Exception $e) {
							\Drupal::logger('gigya_user_deletion')
							  ->error('Failed to delete UID ' . $user->get('uid')->value . ' from CMS with error - ' . $e);
							$counter_failed++;
							\Drupal::state()
							  ->set('gigya_deletion_job.counter_failed', $counter_failed);
						}
					}
					else {
						\Drupal::logger('gigya_user_deletion')
						  ->warning('Failed to delete UID ' . $uid . ' from CMS with error - user doesn\'t exist');
						$counter_failed++;
						\Drupal::state()
						  ->set('gigya_deletion_job.counter_failed', $counter_failed);
					}

					$queue_users->deleteItem($item_user);
				}
			}

			if (($queue_users->numberOfItems() == 0) && ($queue_file->numberOfItems() == 0))
			{
				/* If full or partial success */
				if ($counter_succeed > 0)
				{
					$total = $counter_failed + $counter_succeed;

					/* If completed with errors */
					if ($counter_failed > 0)
					{
						$subject = 'User deletion job completed with errors';
						$message = 'The user deletion job scheduled to run for ' . $_SERVER['SERVER_NAME'] . ' on ' . date('F j, Y \a\t H:i:s', $last_run) . ' completed with errors. ' . $counter_succeed . ' out of ' . $total . ' users were deleted.';
					}
					/* Send email on success */
					else
					{
						$subject = "Users deleted successfully";
						$message = "The user deletion job scheduled to run for " . $_SERVER['SERVER_NAME'] . ' on ' . date('F j, Y \a\t H:i:s', $last_run) . ' completed successfully. ' . $counter_succeed . ' out of ' . $total . ' users were deleted.';
					}
					$to = \Drupal::config('gigya_user_deletion.job')->get('gigya_user_deletion.emailOnSuccess');
					$userDeletionHelper->sendEmail($subject, $message, $to);
				}

				/* If job failed, send email */
				elseif ($counter_failed > 0)
				{
					$subject = "Failed to delete users";
					$message = "The user deletion job scheduled to run for " . $_SERVER['SERVER_NAME'] . ' on ' . date('F j, Y \a\t H:i:s', $last_run) . ' has failed. No users were deleted.';
					$to = \Drupal::config('gigya_user_deletion.job')->get('gigya_user_deletion.emailOnFailure');
					$userDeletionHelper->sendEmail($subject, $message, $to);
				}

				/* Reset counters on DB */
				\Drupal::state()->set('gigya_deletion_job.counter_succeed', 0);
				\Drupal::state()->set('gigya_deletion_job.counter_failed', 0);
			}
		}
		else
		{
			\Drupal::logger('gigya_user_deletion')->warning('Gigya cron installed but not enabled. No action taken.');
		}
	}

	/**
	 * Implement hook_mail()
	 *
	 * {@inheritdoc}
	 */
	function gigya_user_deletion_mail($key, &$message, $params) {
		$options = array(
			'langcode' => $message['langcode'],
		);

		$message['from'] = \Drupal::config('system.site')->get('mail');
		$message['subject'] = t($params['subject'], array(), $options);
		$message['body'][] = $params['message'];
	}